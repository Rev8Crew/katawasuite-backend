version: '3.8'

volumes:
  postgres-data:
    driver: local
  tmp-data:
    driver: local
  redis-data:
      driver: local
  rabbit-data:
    driver: local
  mail-data:
    driver: local

services:
  app: &app
    build:
      context: .
      dockerfile: Dockerfile
    user: "${APP_UID:-10001}:${APP_GID:-10001}"
    networks:
      - katawa-suite
    env_file:
      - .env
    environment:
      PS1: '\[\033[1;32m\]\[\033[1;36m\][\u@\h] \[\033[1;34m\]\w\[\033[0;35m\] \[\033[1;36m\]# \[\033[0m\]'
      HOME: /tmp
    volumes:
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - tmp-data:/tmp:rw
      - .:/app:rw
      - ./docker/supercronic/laravel:/etc/supercronic/laravel
    depends_on:
      postgres: { condition: service_healthy }
      redis: {condition: service_healthy}
      nginx-proxy: {condition: service_started}
      acme-companion: {condition: service_started}
      rabbitmq: {condition: service_healthy}

  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: katawa-suite-nginx-proxy

    networks:
      - katawa-suite
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/htpasswd:/etc/nginx/htpasswd
      - ./docker/nginx/certs:/etc/nginx/certs
      - ./docker/nginx/vhost:/etc/nginx/vhost.d
      - ./docker/nginx/html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro

  acme-companion:
    image: nginxproxy/acme-companion
    networks:
      - katawa-suite
    container_name: katawa-suite-nginx-proxy-acme
    environment:
      - DEFAULT_EMAIL=${AUTHOR_EMAIL}
      - NGINX_PROXY_CONTAINER=katawa-suite-nginx-proxy
    volumes:
      - ./docker/nginx/certs:/etc/nginx/certs:rw
      - ./docker/nginx/vhost:/etc/nginx/vhost.d
      - ./docker/nginx/html:/usr/share/nginx/html
      - ./docker/nginx/acme:/etc/acme.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro

  web:
    <<: *app
    command: "rr serve -c .rr.yaml"
    restart: unless-stopped
    expose:
      - 8080
    environment:
      - VIRTUAL_HOST=${WEB_VIRTUAL_HOST},${HORIZON_DOMAIN},${TELESCOPE_DOMAIN},${APP_SUBDOMAIN}
      - LETSENCRYPT_HOST=${WEB_VIRTUAL_HOST},${HORIZON_DOMAIN},${TELESCOPE_DOMAIN},${APP_SUBDOMAIN}
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider -q "http://127.0.0.1:8082/health?plugin=http&plugin=rpc"']
      interval: 2s
      timeout: 2s

  queue:
    <<: *app
    restart: unless-stopped
    command: "php /app/artisan queue:work --sleep=1"

  cron:
    <<: *app
    restart: unless-stopped
    command: "supercronic /etc/supercronic/laravel" # it runs artisan schedule:run

  horizon:
    <<: *app
    command: php /app/artisan horizon

  postgres:
    image: postgres:15-alpine # Image page: <https://hub.docker.com/_/postgres>
    container_name: katawa-suite-pgsql
    restart: unless-stopped
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    environment:
      POSTGRES_DB: '${DB_DATABASE}'
      POSTGRES_USER: '${DB_USERNAME}'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'
      NETWORK_ACCESS: internal
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - katawa-suite
    healthcheck: # Healthcheck docs: <https://docs.docker.com/engine/reference/builder/#healthcheck>
      test: [ 'CMD-SHELL', 'pg_isready -U admin' ]
      interval: 2s
      timeout: 5s
      start_period: 2s

  redis:
    image: redis:7-alpine # Image page: <https://hub.docker.com/_/redis>
    container_name: katawa-suite-redis
    command: "redis-server --requirepass $${REDIS_PASSWORD}"
    networks:
      - katawa-suite
    volumes:
      - redis-data:/data:rw
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 500ms
      timeout: 1s

  rabbitmq:
    build: ./docker/rabbitmq
    container_name: katawa-suite-rabbitmq
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=${RABBITMQ_VIRTUAL_HOST}
      - LETSENCRYPT_HOST=${RABBITMQ_VIRTUAL_HOST}
      - VIRTUAL_PORT=${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}
      - NETWORK_ACCESS=internal
    privileged: true
    volumes:
      - rabbit-data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./docker/rabbitmq/management_agent.disable_metrics_collector.conf:/etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - katawa-suite

networks:
  katawa-suite:
    driver: bridge
